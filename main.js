/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
var gameObject = function () {
  var gameBoard = ["", "", "", "", "", "", "", "", ""];
  var victoryState = 0;
  var turnNumber = 0;
  var resultModal = document.getElementById("resultModal"); // Registers a victory for three 'X's in a row

  var crossVictory = function crossVictory() {
    if (gameBoard[0] == "X" && gameBoard[1] == "X" && gameBoard[2] == "X") {
      document.getElementById("xWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[0] == "X" && gameBoard[3] == "X" && gameBoard[6] == "X") {
      document.getElementById("xWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[0] == "X" && gameBoard[4] == "X" && gameBoard[8] == "X") {
      document.getElementById("xWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[1] == "X" && gameBoard[4] == "X" && gameBoard[7] == "X") {
      document.getElementById("xWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[2] == "X" && gameBoard[4] == "X" && gameBoard[6] == "X") {
      document.getElementById("xWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[2] == "X" && gameBoard[5] == "X" && gameBoard[8] == "X") {
      document.getElementById("xWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[3] == "X" && gameBoard[4] == "X" && gameBoard[5] == "X") {
      document.getElementById("xWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[6] == "X" && gameBoard[7] == "X" && gameBoard[8] == "X") {
      document.getElementById("xWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    }
  }; // Registers a victory for three 'O's in a row


  var circleVictory = function circleVictory() {
    if (gameBoard[0] == "O" && gameBoard[1] == "O" && gameBoard[2] == "O") {
      document.getElementById("oWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[0] == "O" && gameBoard[3] == "O" && gameBoard[6] == "O") {
      document.getElementById("oWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[0] == "O" && gameBoard[4] == "O" && gameBoard[8] == "O") {
      document.getElementById("oWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[1] == "O" && gameBoard[4] == "O" && gameBoard[7] == "O") {
      document.getElementById("oWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[2] == "O" && gameBoard[4] == "O" && gameBoard[6] == "O") {
      document.getElementById("oWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[2] == "O" && gameBoard[5] == "O" && gameBoard[8] == "O") {
      document.getElementById("oWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[3] == "O" && gameBoard[4] == "O" && gameBoard[5] == "O") {
      document.getElementById("oWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    } else if (gameBoard[6] == "O" && gameBoard[7] == "O" && gameBoard[8] == "O") {
      document.getElementById("oWin").removeAttribute("hidden");
      resultModal.style.display = "block";
      victoryState = 1;
    }
  }; // Registers a tie if nobody can get three in a row


  var tieGame = function tieGame() {
    if (victoryState == 0 && turnNumber == 9) {
      document.getElementById("tieGame").removeAttribute("hidden");
      resultModal.style.display = "block";
    } else {}
  }; // Populates a 'X'


  var insertX = function insertX(location) {
    var cross = document.createElement("i");
    cross.id = "cross";
    cross.className = "fal fa-times puff-in-center";
    document.getElementById("".concat(location)).appendChild(cross);
  }; // Populates a 'O'


  var insertO = function insertO(location) {
    var circle = document.createElement("i");
    circle.id = "circle";
    circle.className = "far fa-circle puff-in-center";
    document.getElementById("".concat(location)).appendChild(circle);
  }; // Starts the game


  var startGame = function startGame() {
    gameObject.topLeft();
    gameObject.topCenter();
    gameObject.topRight();
    gameObject.centerLeft();
    gameObject.center();
    gameObject.centerRight();
    gameObject.bottomLeft();
    gameObject.bottomCenter();
    gameObject.bottomRight();
  }; // Restarts the Game


  var restartGame = function restartGame() {
    gameBoard.splice(0, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8);
    victoryState = 0;
    turnNumber = 0;
    var old_element = document.getElementsByClassName("boardButton");

    for (var i = 0; i < old_element.length; i++) {
      while (old_element[i].firstChild) {
        old_element[i].removeChild(old_element[i].firstChild);
      }

      var new_element = old_element[i].cloneNode(true);
      old_element[i].parentNode.replaceChild(new_element, old_element[i]);
    }
  }; // Allows top left block to spawn either 'X' or 'O'


  var topLeft = function topLeft() {
    var marker = document.getElementById("topLeft");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("topLeft");
        gameBoard.splice(0, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("topLeft");
        gameBoard.splice(0, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  }; // Allows top center block to spawn either 'X' or 'O'


  var topCenter = function topCenter() {
    var marker = document.getElementById("topCenter");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("topCenter");
        gameBoard.splice(1, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("topCenter");
        gameBoard.splice(1, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  }; // Allows top right block to spawn either 'X' or 'O'


  var topRight = function topRight() {
    var marker = document.getElementById("topRight");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("topRight");
        gameBoard.splice(2, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("topRight");
        gameBoard.splice(2, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  }; // Allows center left block to spawn either 'X' or 'O'


  var centerLeft = function centerLeft() {
    var marker = document.getElementById("centerLeft");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("centerLeft");
        gameBoard.splice(3, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("centerLeft");
        gameBoard.splice(3, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  }; // Allows center block to spawn either 'X' or 'O'


  var center = function center() {
    var marker = document.getElementById("center");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("center");
        gameBoard.splice(4, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("center");
        gameBoard.splice(4, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  }; // Allows center right block to spawn either 'X' or 'O'


  var centerRight = function centerRight() {
    var marker = document.getElementById("centerRight");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("centerRight");
        gameBoard.splice(5, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("centerRight");
        gameBoard.splice(5, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  }; // Allows bottom left block to spawn either 'X' or 'O'


  var bottomLeft = function bottomLeft() {
    var marker = document.getElementById("bottomLeft");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("bottomLeft");
        gameBoard.splice(6, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("bottomLeft");
        gameBoard.splice(6, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  }; // Allows bottom center block to spawn either 'X' or 'O'


  var bottomCenter = function bottomCenter() {
    var marker = document.getElementById("bottomCenter");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("bottomCenter");
        gameBoard.splice(7, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("bottomCenter");
        gameBoard.splice(7, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  }; // Allows bottom right block to spawn either 'X' or 'O'


  var bottomRight = function bottomRight() {
    var marker = document.getElementById("bottomRight");
    marker.addEventListener("click", function check() {
      turnNumber += 1;

      if (player.getMarker() == "X") {
        insertX("bottomRight");
        gameBoard.splice(8, 1, "X");
        crossVictory();
        tieGame();
      } else {
        insertO("bottomRight");
        gameBoard.splice(8, 1, "O");
        circleVictory();
        tieGame();
      }

      gameFlow.swapPlayers();
      marker.removeEventListener("click", check);
    });
  };

  return {
    topLeft: topLeft,
    topCenter: topCenter,
    topRight: topRight,
    centerLeft: centerLeft,
    center: center,
    centerRight: centerRight,
    bottomLeft: bottomLeft,
    bottomCenter: bottomCenter,
    bottomRight: bottomRight,
    startGame: startGame,
    restartGame: restartGame
  };
}(); // Generates a player that is used for the game


var Player = function Player(name, marker) {
  var getName = function getName() {
    return name;
  };

  var getMarker = function getMarker() {
    return marker;
  };

  return {
    getName: getName,
    getMarker: getMarker
  };
};

var player = Player("james", "O");
originalMarker = "O";
var currentPlayer = 1; // Allows regular alternation between players during the game

var gameFlow = function () {
  var swapPlayers = function swapPlayers() {
    if (currentPlayer == 1) {
      player = Player("sivanna", "X");
      currentPlayer = 2;
    } else if (currentPlayer == 2) {
      player = Player("james", "O");
      currentPlayer = 1;
    }
  };

  return {
    swapPlayers: swapPlayers
  };
}(); // Click button to start the game


var start = document.getElementById("start");
start.addEventListener("click", function check() {
  gameObject.startGame();
  start.removeEventListener("click", check);
}); // Restarts all game values and clears the board

var restart = document.getElementById("restart");

var restartRound = function restartRound() {
  // start = "";
  gameObject.restartGame();
  gameObject.startGame();
  player = Player("james", originalMarker);

  if (originalMarker == "O") {
    currentPlayer = 1;
  } else {
    currentPlayer = 2;
  }
};

restart.addEventListener("click", restartRound); // Info Modal

var playerName = document.getElementById("editButton");
var modal = document.getElementById("modalContainer");
var span = document.getElementById("close"); // Populates the modal

playerName.onclick = function () {
  modal.style.display = "block";
}; // Closes modal


span.onclick = function () {
  modal.style.display = "none";
}; // Closes results modal when clicking outside of the text


window.onclick = function (event) {
  if (event.target == resultModal) {
    resultModal.style.display = "none";
    restartRound();
    document.getElementById("xWin").setAttribute("hidden", true);
    document.getElementById("oWin").setAttribute("hidden", true);
    document.getElementById("tieGame").setAttribute("hidden", true);
  }
}; // Sends custom names and markers to the display and restarts the round


var form = document.getElementById("form");

var submitForm = function submitForm(event) {
  event.preventDefault();
  modal.style.display = "none";
  var player1Display = document.getElementById("player1Display");
  var customPlayer1 = document.getElementById("player1").value;
  player1Display.textContent = customPlayer1;
  var player2Display = document.getElementById("player2Display");
  var customPlayer2 = document.getElementById("player2").value;
  player2Display.textContent = customPlayer2;
  var checkBox = document.getElementById("mainBox");

  if (checkBox.checked == true) {
    player = Player(customPlayer1, "X");
    originalMarker = "X";
    currentPlayer = 2;
    restartRound();
  } else {
    player = Player(customPlayer1, "O");
    originalMarker = "O";
    restartRound();
  }
};

form.addEventListener("submit", submitForm);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,